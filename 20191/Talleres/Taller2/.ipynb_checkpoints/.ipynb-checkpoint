{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Taller 2 - Python\n",
    "## Fundamentos en Biología Computacional\n",
    "## 2019-1, Prof. Javier Correa\n",
    "Nota: Se calificará que el código sea lo más simple, claro, original y eficiente. No usar funciones no realizadas por ustedes mismos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Realice un función para expresar cualquier número entero en su conotación factorial. <br>\n",
    "Ejemplo: factorial(4)<br>\n",
    "Out: 24"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numerofactorial(ne):\n",
    "    num=1\n",
    "    for i in range (1,ne+1):\n",
    "          num=num*i\n",
    "    return num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerofactorial(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Realice un función para expresar la potencia de cualquier número. La función recibe como parámetros la base y el exponencial. <br>\n",
    "Ejemplo: potencia(4,2)<br>\n",
    "Out: 16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "def potencia(num, exp):\n",
    "    return  num**exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "potencia(2, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Utilizando las dos funciones anteriormente definidas (factorial y potencia), realice un función para expresar el Coseno de un entero. <br>\n",
    "Ejemplo: coseno(5)<br>\n",
    "Out: 0.996194698"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def funcoseno (numentero):\n",
    "    coseno = 0\n",
    "    i = 0\n",
    "    numentero = numentero*(3.141592/180)\n",
    "    for i in range  (0,10):\n",
    "        coseno = coseno + potencia (-1, i)*((potencia(numentero,2*i)/numerofactorial(2*i)))\n",
    "        i=i+1\n",
    "    return (coseno)\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9961946996740816"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "funcoseno (5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Dadas las cantidades de individuos con los genótipos AA, AB y BB. Calcular la frecuencia de los alelos A y B <br>\n",
    "Ejemplo: FrecuenciaAlelos(12,4,4) <br>\n",
    "Out: (0.7, 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#opcion1\n",
    "def frecal (AA, AB, BB, total):\n",
    "    return ((2*AA)  + AB)/(total*2) , ((2*BB) +AB)/(total*2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "#opcion2\n",
    "def f_alelos (AA, AB, BB):\n",
    "    return ((2*AA)  + AB)/((AA+AB+BB)*2) , ((2*BB) +AB)/((AA+AB+BB)*2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7, 0.3)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_alelos (12, 4, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7, 0.3)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frecal (12, 4, 4, 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Dada una cadena de DNA retornar una de (-) RNA en sentido 5'-> 3' <br>\n",
    "Ejemplo: DNA_to_RNA(\"TCTCTACTCATGTCTGCA\")<br>\n",
    "Out: GUACUCACGUCUGCUCUC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def DNA_to_RNA(DNA):\n",
    "    RNA = \"\"\n",
    "    DNAt = len (DNA)\n",
    "    i = 0\n",
    "    \n",
    "    while i <= DNAt-1:\n",
    "        if DNA[i]==\"A\":\n",
    "            RNA=RNA+\"G\"\n",
    "        if DNA[i]==\"C\":\n",
    "            RNA=RNA+\"U\"\n",
    "        if DNA[i]==\"G\":\n",
    "            RNA=RNA+\"A\"\n",
    "        if DNA[i]==\"T\":\n",
    "            RNA=RNA+\"C\"\n",
    "            \n",
    "        i = i + 1\n",
    "    print (RNA[::-1])\n",
    "        \n",
    "   \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GUACUCACGUCUGCUCUC\n"
     ]
    }
   ],
   "source": [
    "DNA_to_RNA(\"TCTCTACTCATGTCTGCA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Realizar una función que calcule la Temperatura de Melting Promedio de un par de primers de DNA en grados Celcius. Teniendo en cuenta que; en un oligonucleótido < de 14 nucleótidos, la Tm se calcula multiplicando la cantidad de G+C por 4 y las A+T por 2. Mientras que, si es >= de 14 nt, se debe aplicar la siguiente fórmula (64.9 + 41 * (totalG+C -16.4) / Tamaño sel oligo). <br>\n",
    "Ejemplo: tempromelt(TCTCTACTCATGTCTGCA, TCGCGTGCACGTG)<br>\n",
    "Out: 44.88333333333334"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nG (primer):\n",
    "    lon = len(primer)\n",
    "    numero = 0\n",
    "    i = 0\n",
    "    for i in range (lon):\n",
    "        if primer[i] == \"G\":\n",
    "            numero = numero + 1\n",
    "    return (numero)\n",
    "\n",
    "def nC (primer):\n",
    "    lon = len(primer)\n",
    "    numero = 0\n",
    "    i=0\n",
    "    for i in range (lon):\n",
    "        if primer[i]== \"C\":\n",
    "            numero = numero + 1\n",
    "            \n",
    "    return (numero)\n",
    "\n",
    "def nA (primer):\n",
    "    lon = len(primer)\n",
    "    numero = 0\n",
    "    i = 0\n",
    "    for i in range (lon):\n",
    "        if primer[i] == \"A\":\n",
    "            numero = numero + 1\n",
    "    return (numero)\n",
    "\n",
    "def nT (primer):\n",
    "    lon=len(primer)\n",
    "    numero = 0\n",
    "    i = 0\n",
    "    for i in range (lon):\n",
    "        if primer[i] == \"T\":\n",
    "            numero = numero + 1\n",
    "    return (numero)\n",
    "\n",
    "def G_C (primer):\n",
    "    GC = nG (primer) + nC (primer)\n",
    "    return (GC)\n",
    "\n",
    "def A_T (primer):\n",
    "    AT = nA (primer) + nT (primer)\n",
    "    return (AT)\n",
    "\n",
    "def TempMelting (primer):\n",
    "    if len(primer) < 14:\n",
    "        Temperatura  = G_C(primer)*4 + A_T(primer)*2\n",
    "    else:\n",
    "        Temperatura = 64.9 + 41 * (G_C(primer)-16.4)/len(primer)\n",
    "    return Temperatura\n",
    "\n",
    "def TMpromedio (primer1, primer2):\n",
    "    return (TempMelting(primer1)+ TempMelting(primer2))/2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44.88333333333334"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TMpromedio (\"TCTCTACTCATGTCTGCA\", \"TCGCGTGCACGTG\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Hallar la distancia Hamming entre dos secuencias dadas de polipéptidos. <br>\n",
    "link: https://es.wikipedia.org/wiki/Distancia_de_Hamming <br>\n",
    "Ejemplo: distancia_Hamming(\"SRSLLLRFLMSRSLLLRFLLFLLLLPPLPLFLLLLPPL\",\"SRSLLLRFLSSRSLLLRFLLFLLLLAALALFLLLLSML\")<br>\n",
    "Out:6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hamming(pol1, pol2):\n",
    "    lon = len(pol1)\n",
    "    ham = 0\n",
    "    for i in range (lon):\n",
    "        if pol1[i] != pol2[i]:\n",
    "            ham = ham+1\n",
    "    return ham"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hamming (\"SRSLLLRFLMSRSLLLRFLLFLLLLPPLPLFLLLLPPL\",\"SRSLLLRFLSSRSLLLRFLLFLLLLAALALFLLLLSML\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Dada la tabla de codones estandar, hacer una función para traducir una cadena de DNA empezando desde la posición 1 <br>\n",
    "Ejemplo: traducir(\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")<br>\n",
    "Out: Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop '"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def traducirDNA (secuencia):\n",
    "   \n",
    "    tabla_Codones = {\n",
    "    'ATA':'I ', 'ATC':'I ', 'ATT':'I ', 'ATG':'Met ',\n",
    "    'ACA':'T ', 'ACC':'T ', 'ACG':'T ', 'ACT':'T ',\n",
    "    'AAC':'N ', 'AAT':'N ', 'AAA':'K ', 'AAG':'K ',\n",
    "    'AGC':'S ', 'AGT':'S ', 'AGA':'R ', 'AGG':'R ',\n",
    "    'CTA':'L ', 'CTC':'L ', 'CTG':'L ', 'CTT':'L ',\n",
    "    'CCA':'P ', 'CCC':'P ', 'CCG':'P ', 'CCT':'P ',\n",
    "    'CAC':'H ', 'CAT':'H ', 'CAA':'Q ', 'CAG':'Q ',\n",
    "    'CGA':'R ', 'CGC':'R ', 'CGG':'R ', 'CGT':'R ',\n",
    "    'GTA':'V ', 'GTC':'V ', 'GTG':'V ', 'GTT':'V ',\n",
    "    'GCA':'A ', 'GCC':'A ', 'GCG':'A ', 'GCT':'A ',\n",
    "    'GAC':'D ', 'GAT':'D ', 'GAA':'E ', 'GAG':'E ',\n",
    "    'GGA':'G ', 'GGC':'G ', 'GGG':'G ', 'GGT':'G ',\n",
    "    'TCA':'S ', 'TCC':'S ', 'TCG':'S ', 'TCT':'S ',\n",
    "    'TTC':'F ', 'TTT':'F ', 'TTA':'L ', 'TTG':'L ',\n",
    "    'TAC':'Y ', 'TAT':'Y ', 'TAA':'Stop ', 'TAG':'Stop ',\n",
    "    'TGC':'C ', 'TGT':'C ', 'TGA':'Stop ', 'TGG':'W ',}\n",
    "    \n",
    "    proteina = \"\"\n",
    "    if len(secuencia):\n",
    "        for i in range(0, len(secuencia), 3):\n",
    "            try:\n",
    "                codon = secuencia[i : i+3]\n",
    "                proteina += tabla_Codones[codon]\n",
    "                \n",
    "            except:\n",
    "                pass\n",
    "        return proteina\n",
    "\n",
    "traducirDNA(\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Usando la función anterior, traducir la secuencia de DNA dada en los 6 frames posibles para producir un polipéptido.\n",
    "Ejemplo: traducirALL(\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")<br>\n",
    "Out: (Frame1:Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop, Frame2:W R V Stop I A I R A H A Met F A Met R L W R S L Met R A I T I P V I A I S I A, Frame3:G A Y E Stop Q S E R Met P C L P C G S G G H Stop C V Q Stop Q Y P Stop Stop Q Y Q Stop L, Frame4:L A I D I A I T G I V I A R I N D R Q S R Met A N Met A C A R I A I H T R H, Frame5:Stop L L I L L L R V L L L H A S Met T A R A A W Q T W H A L G L L F I R A, Frame6:S Y Stop Y C Y Y G Y C Y C T H Q Stop P P E P H G K H G Met R S D C Y S Y A P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TACCGC'"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def complementaria (DNA):\n",
    "    cDNA = \"\"\n",
    "    DNAt = len (DNA)\n",
    "    i = 0\n",
    "    \n",
    "    while i <= DNAt-1:\n",
    "        if DNA[i]==\"A\":\n",
    "            cDNA=cDNA+\"T\"\n",
    "        if DNA[i]==\"C\":\n",
    "            cDNA=cDNA+\"G\"\n",
    "        if DNA[i]==\"G\":\n",
    "            cDNA=cDNA+\"C\"\n",
    "        if DNA[i]==\"T\":\n",
    "            cDNA=cDNA+\"A\"\n",
    "            \n",
    "        i = i + 1\n",
    "    return cDNA\n",
    "complementaria (\"ATGGCG\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Frame1:Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop Frame2:W R V Stop I A I R A H A Met F A Met R L W R S L Met R A I T I P V I A I S I A Frame3:G A Y E Stop Q S E R Met P C L P C G S G G H Stop C V Q Stop Q Y P Stop Stop Q Y Q Stop L '"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def frameone_three (seq):\n",
    "    return ((\"Frame1:\" + traducirDNA(seq)) + (\"Frame2:\" + traducirDNA(seq[1:])) + (\"Frame3:\" + traducirDNA(seq[2:])))\n",
    "frameone_three (\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Frame4:L A I D I A I T G I V I A R I N D R Q S R Met A N Met A C A R I A I H T R H Frame5:Stop L L I L L L R V L L L H A S Met T A R A A W Q T W H A L G L L F I R A Frame6:S Y Stop Y C Y Y G Y C Y C T H Q Stop P P E P H G K H G Met R S D C Y S Y A P '"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def frame4_6 (seq):\n",
    "    seqinv = seq[::-1]\n",
    "    return ((\"Frame4:\"+ traducirDNA(complementaria(seqinv)))) + (\"Frame5:\" + traducirDNA(complementaria(seqinv[1:]))) + (\"Frame6:\" + traducirDNA(complementaria(seqinv[2:])))\n",
    "frame4_6(\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Frame1:Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop Frame2:W R V Stop I A I R A H A Met F A Met R L W R S L Met R A I T I P V I A I S I A Frame3:G A Y E Stop Q S E R Met P C L P C G S G G H Stop C V Q Stop Q Y P Stop Stop Q Y Q Stop L Frame4:L A I D I A I T G I V I A R I N D R Q S R Met A N Met A C A R I A I H T R H Frame5:Stop L L I L L L R V L L L H A S Met T A R A A W Q T W H A L G L L F I R A Frame6:S Y Stop Y C Y Y G Y C Y C T H Q Stop P P E P H G K H G Met R S D C Y S Y A P '"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def Traducirall (seq):\n",
    "    seqinv = seq[::-1]\n",
    "    return ((\"Frame1:\" + traducirDNA(seq)) + (\"Frame2:\" + traducirDNA(seq[1:])) + (\"Frame3:\" + traducirDNA(seq[2:]))) + ((\"Frame4:\"+ traducirDNA(complementaria(seqinv)))) + (\"Frame5:\" + traducirDNA(complementaria(seqinv[1:]))) + (\"Frame6:\" + traducirDNA(complementaria(seqinv[2:])))\n",
    "Traducirall(\"ATGGCGCGTATGAATAGCAATCCGAGCGCATGCCATGTTTGCCATGCGGCTCTGGCGGTCATTGATGCGTGCAATAACAATACCCGTAATAGCAATATCAATAGCTAA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "$$\" Frame1:Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop Frame2:W R V Stop I A I R A H A Met F A Met R L W R S L Met R A I T I P V I A I S I A Frame3:G A Y E Stop Q S E R Met P C L P C G S G G H Stop C V Q Stop Q Y P Stop Stop Q Y Q Stop L Frame4:L A I D I A I T G I V I A R I N D R Q S R Met A N Met A C A R I A I H T R H Frame5:Stop L L I L L L R V L L L H A S Met T A R A A W Q T W H A L G L L F I R A Frame6:S Y Stop Y C Y Y G Y C Y C T H Q Stop P P E P H G K H G Met R S D C Y S Y A P \"$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "'Frame1:Met A R Met N S N P S A C H V C H A A L A V I D A C N N N T R N S N I N S Stop Frame2:W R V Stop I A I R A H A Met F A Met R L W R S L Met R A I T I P V I A I S I A Frame3:G A Y E Stop Q S E R Met P C L P C G S G G H Stop C V Q Stop Q Y P Stop Stop Q Y Q Stop L Frame4:L A I D I A I T G I V I A R I N D R Q S R Met A N Met A C A R I A I H T R H Frame5:Stop L L I L L L R V L L L H A S Met T A R A A W Q T W H A L G L L F I R A Frame6:S Y Stop Y C Y Y G Y C Y C T H Q Stop P P E P H G K H G Met R S D C Y S Y A P '"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Su código genético es esencialmente el mismo desde que nace hasta que muere, y el mismo en su sangre y su cerebro. Los genes que se activan y desactivan marcan la diferencia entre las células. Esta regulación de los genes está orquestada por un mecanismo inmensamente complejo, que solo hemos empezado a comprender. Una parte central de este mecanismo consiste en moléculas llamadas factores de transcripción que se adhieren al ADN, y al hacerlo, activan o desactivan los genes cercanos. Estas moléculas se unen preferentemente a secuencias específicas de ADN, y este patrón de preferencia de unión puede representarse mediante una tabla de frecuencias de símbolos dados en cada posición del patrón. Más precisamente, cada fila en la tabla corresponde a las bases A, C, G y T, mientras que la columna j refleja cuántas veces aparece la base en la posición j en la secuencia del ADN.\n",
    "\n",
    "    Por ejemplo; si nuestro conjunto de secuencias de ADN son TAG, GGT y GGG, la tabla se convierte en\n",
    "\n",
    "\n",
    "|base|\t0|\t1|\t2|\n",
    "|----|---|---|---|\n",
    "|A\t|0\t|1\t|0  |\n",
    "|C\t|0\t|0\t|0  |\n",
    "|G \t|2\t|2\t|2  |\n",
    "|T\t|1\t|0\t|1  |\n",
    "\n",
    "De esta tabla podemos leer que la base A aparece una vez en el índice 1 en las cadenas de ADN, la base C no aparece en absoluto, la base G aparece dos veces en todas las posiciones y la base T aparece una vez al principio y al final de las cadenas.\n",
    "\n",
    "a. Dada una lista de Strings con motivos de 4 nucleótidos, construir una matriz de frecuencias para las posiciones de los 4 nucleótidos. \n",
    "\n",
    "Ejemplo:<br>\n",
    "listamotivos =[\"ACTG\", \"CCAG\", \"AGAG\", \"CGTA\"]<br>\n",
    "MatrizFrecuencia(listamotivos)<br>\n",
    "Out: [[2, 0, 2, 1]<br>\n",
    " [2, 2, 0, 0]<br>\n",
    " [0, 2, 0, 3]<br>\n",
    " [0, 0, 2, 0]]<br>\n",
    " \n",
    "b. Realizar una función que retorne el nucleótido que más frecuencia obtuvo por posición. Si tienen la misma frecuecia retornar los valores iguales. <br>\n",
    "Ejemplo:<br>\n",
    "FrecuenciaMayorNt(MatrizFrecuencia(listamotivos))<br>\n",
    "Out: [[A:0.5, C:0.5],<br>\n",
    "[C:0.5,G:0.5],<br>\n",
    "[A:0.5,T:0.5],<br>\n",
    "[G:0.75]]<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2, 0, 2, 1], [2, 2, 0, 0], [0, 2, 0, 3], [0, 0, 2, 0]]"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def nNucleotidos (lm):\n",
    "    A = [0]*len(lm[0])\n",
    "    T = [0]*len(lm[0])\n",
    "    C = [0]*len(lm[0])\n",
    "    G = [0]*len(lm[0])\n",
    "    for j in range (len(lm[0])):\n",
    "        nA = 0\n",
    "        nT = 0\n",
    "        nG = 0\n",
    "        nC = 0\n",
    "        for i in range (len(lm)):\n",
    "            if lm[i][j] == 'A':\n",
    "                nA = nA + 1\n",
    "            elif lm[i][j] == 'T':\n",
    "                nT = nT + 1\n",
    "            elif lm[i][j] == 'G':\n",
    "                nG = nG + 1\n",
    "            elif lm[i][j] == 'C':\n",
    "                nC = nC + 1\n",
    "        A[j] = nA\n",
    "        C[j] = nC\n",
    "        G[j] = nG\n",
    "        T[j] = nT\n",
    "\n",
    "    resultado = [A, C, G, T]\n",
    "    return(resultado)\n",
    "\n",
    "nNucleotidos([\"ACTG\", \"CCAG\", \"AGAG\", \"CGTA\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(['A', 'C', '0', '0'], [0.5, 0.5, 'AGAG', 'CGTA'])\n",
      "(['0', 'C', 'G', '0'], [0.5, 0.5, 'AGAG', 'CGTA'])\n",
      "(['A', '0', '0', 'T'], [0.5, 0.5, 'AGAG', 'CGTA'])\n",
      "(['0', '0', 'G', '0'], [0.75, 'CCAG', 'AGAG', 'CGTA'])\n"
     ]
    }
   ],
   "source": [
    "def frecuenciaP (lm, pos):\n",
    "    nb = nNucleotidos([\"ACTG\", \"CCAG\", \"AGAG\", \"CGTA\"])\n",
    "    frecu = [0]*len(nb[0])\n",
    "    for i in range (len(nb[0])):\n",
    "        frecu[i] = nb[i][pos]/len(nb[0])\n",
    "        \n",
    "    return(frecu)\n",
    "\n",
    "def Fmayor (lm, pos):\n",
    "    Fposición = frecuenciaP(lm,pos) \n",
    "    mayor  = max(Fposición)\n",
    "    tamaño = 0\n",
    "    for i in range (len(Fposición)):\n",
    "        if Fposición[i] == mayor:\n",
    "            tamaño = tamaño+1\n",
    "    posiciónM = [0]*len(Fposición)\n",
    "    lista = [0]*tamaño\n",
    "    for i in range (len(Fposición)):\n",
    "        if Fposición[i] == mayor:\n",
    "            for j in range (tamaño):\n",
    "                posiciónM[i] = i+1\n",
    "                lm[j] = Fposición[i]\n",
    "                \n",
    "                \n",
    "    return(posiciónM,lm)\n",
    "        \n",
    "\n",
    "def ult (lm, pos):\n",
    "    x = Fmayor(lm, pos)\n",
    "    for w in range (4):\n",
    "        if x[0][w] == 1:\n",
    "            x[0][w] = 'A'\n",
    "        elif x[0][w] == 2:\n",
    "            x[0][w] = 'C'\n",
    "        elif x[0][w] == 3:\n",
    "            x[0][w] = 'G'\n",
    "        elif x[0][w] == 4:\n",
    "            x[0][w] = 'T'\n",
    "    for w in range (4):\n",
    "        x[0][w] = str(x[0][w])\n",
    "    return(x)\n",
    "\n",
    "ult([\"ACTG\", \"CCAG\", \"AGAG\", \"CGTA\"],0)\n",
    "\n",
    "for m in range (4):\n",
    "    print(ult([\"ACTG\", \"CCAG\", \"AGAG\", \"CGTA\"],m))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
